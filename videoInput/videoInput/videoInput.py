# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_videoInput', [dirname(__file__)])
        except ImportError:
            import _videoInput
            return _videoInput
        if fp is not None:
            try:
                _mod = imp.load_module('_videoInput', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _videoInput = swig_import_helper()
    del swig_import_helper
else:
    import _videoInput
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class MediaType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MF_MT_FRAME_SIZE"] = _videoInput.MediaType_MF_MT_FRAME_SIZE_set
    __swig_getmethods__["MF_MT_FRAME_SIZE"] = _videoInput.MediaType_MF_MT_FRAME_SIZE_get
    if _newclass:
        MF_MT_FRAME_SIZE = _swig_property(_videoInput.MediaType_MF_MT_FRAME_SIZE_get, _videoInput.MediaType_MF_MT_FRAME_SIZE_set)
    __swig_setmethods__["height"] = _videoInput.MediaType_height_set
    __swig_getmethods__["height"] = _videoInput.MediaType_height_get
    if _newclass:
        height = _swig_property(_videoInput.MediaType_height_get, _videoInput.MediaType_height_set)
    __swig_setmethods__["width"] = _videoInput.MediaType_width_set
    __swig_getmethods__["width"] = _videoInput.MediaType_width_get
    if _newclass:
        width = _swig_property(_videoInput.MediaType_width_get, _videoInput.MediaType_width_set)
    __swig_setmethods__["MF_MT_YUV_MATRIX"] = _videoInput.MediaType_MF_MT_YUV_MATRIX_set
    __swig_getmethods__["MF_MT_YUV_MATRIX"] = _videoInput.MediaType_MF_MT_YUV_MATRIX_get
    if _newclass:
        MF_MT_YUV_MATRIX = _swig_property(_videoInput.MediaType_MF_MT_YUV_MATRIX_get, _videoInput.MediaType_MF_MT_YUV_MATRIX_set)
    __swig_setmethods__["MF_MT_VIDEO_LIGHTING"] = _videoInput.MediaType_MF_MT_VIDEO_LIGHTING_set
    __swig_getmethods__["MF_MT_VIDEO_LIGHTING"] = _videoInput.MediaType_MF_MT_VIDEO_LIGHTING_get
    if _newclass:
        MF_MT_VIDEO_LIGHTING = _swig_property(_videoInput.MediaType_MF_MT_VIDEO_LIGHTING_get, _videoInput.MediaType_MF_MT_VIDEO_LIGHTING_set)
    __swig_setmethods__["MF_MT_DEFAULT_STRIDE"] = _videoInput.MediaType_MF_MT_DEFAULT_STRIDE_set
    __swig_getmethods__["MF_MT_DEFAULT_STRIDE"] = _videoInput.MediaType_MF_MT_DEFAULT_STRIDE_get
    if _newclass:
        MF_MT_DEFAULT_STRIDE = _swig_property(_videoInput.MediaType_MF_MT_DEFAULT_STRIDE_get, _videoInput.MediaType_MF_MT_DEFAULT_STRIDE_set)
    __swig_setmethods__["MF_MT_VIDEO_CHROMA_SITING"] = _videoInput.MediaType_MF_MT_VIDEO_CHROMA_SITING_set
    __swig_getmethods__["MF_MT_VIDEO_CHROMA_SITING"] = _videoInput.MediaType_MF_MT_VIDEO_CHROMA_SITING_get
    if _newclass:
        MF_MT_VIDEO_CHROMA_SITING = _swig_property(_videoInput.MediaType_MF_MT_VIDEO_CHROMA_SITING_get, _videoInput.MediaType_MF_MT_VIDEO_CHROMA_SITING_set)
    __swig_setmethods__["MF_MT_AM_FORMAT_TYPE"] = _videoInput.MediaType_MF_MT_AM_FORMAT_TYPE_set
    __swig_getmethods__["MF_MT_AM_FORMAT_TYPE"] = _videoInput.MediaType_MF_MT_AM_FORMAT_TYPE_get
    if _newclass:
        MF_MT_AM_FORMAT_TYPE = _swig_property(_videoInput.MediaType_MF_MT_AM_FORMAT_TYPE_get, _videoInput.MediaType_MF_MT_AM_FORMAT_TYPE_set)
    __swig_setmethods__["MF_MT_AM_FORMAT_TYPEName"] = _videoInput.MediaType_MF_MT_AM_FORMAT_TYPEName_set
    __swig_getmethods__["MF_MT_AM_FORMAT_TYPEName"] = _videoInput.MediaType_MF_MT_AM_FORMAT_TYPEName_get
    if _newclass:
        MF_MT_AM_FORMAT_TYPEName = _swig_property(_videoInput.MediaType_MF_MT_AM_FORMAT_TYPEName_get, _videoInput.MediaType_MF_MT_AM_FORMAT_TYPEName_set)
    __swig_setmethods__["MF_MT_FIXED_SIZE_SAMPLES"] = _videoInput.MediaType_MF_MT_FIXED_SIZE_SAMPLES_set
    __swig_getmethods__["MF_MT_FIXED_SIZE_SAMPLES"] = _videoInput.MediaType_MF_MT_FIXED_SIZE_SAMPLES_get
    if _newclass:
        MF_MT_FIXED_SIZE_SAMPLES = _swig_property(_videoInput.MediaType_MF_MT_FIXED_SIZE_SAMPLES_get, _videoInput.MediaType_MF_MT_FIXED_SIZE_SAMPLES_set)
    __swig_setmethods__["MF_MT_VIDEO_NOMINAL_RANGE"] = _videoInput.MediaType_MF_MT_VIDEO_NOMINAL_RANGE_set
    __swig_getmethods__["MF_MT_VIDEO_NOMINAL_RANGE"] = _videoInput.MediaType_MF_MT_VIDEO_NOMINAL_RANGE_get
    if _newclass:
        MF_MT_VIDEO_NOMINAL_RANGE = _swig_property(_videoInput.MediaType_MF_MT_VIDEO_NOMINAL_RANGE_get, _videoInput.MediaType_MF_MT_VIDEO_NOMINAL_RANGE_set)
    __swig_setmethods__["MF_MT_FRAME_RATE_RANGE_MAX"] = _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MAX_set
    __swig_getmethods__["MF_MT_FRAME_RATE_RANGE_MAX"] = _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MAX_get
    if _newclass:
        MF_MT_FRAME_RATE_RANGE_MAX = _swig_property(_videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MAX_get, _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MAX_set)
    __swig_setmethods__["MF_MT_FRAME_RATE"] = _videoInput.MediaType_MF_MT_FRAME_RATE_set
    __swig_getmethods__["MF_MT_FRAME_RATE"] = _videoInput.MediaType_MF_MT_FRAME_RATE_get
    if _newclass:
        MF_MT_FRAME_RATE = _swig_property(_videoInput.MediaType_MF_MT_FRAME_RATE_get, _videoInput.MediaType_MF_MT_FRAME_RATE_set)
    __swig_setmethods__["MF_MT_FRAME_RATE_RANGE_MIN"] = _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MIN_set
    __swig_getmethods__["MF_MT_FRAME_RATE_RANGE_MIN"] = _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MIN_get
    if _newclass:
        MF_MT_FRAME_RATE_RANGE_MIN = _swig_property(_videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MIN_get, _videoInput.MediaType_MF_MT_FRAME_RATE_RANGE_MIN_set)
    __swig_setmethods__["MF_MT_PIXEL_ASPECT_RATIO"] = _videoInput.MediaType_MF_MT_PIXEL_ASPECT_RATIO_set
    __swig_getmethods__["MF_MT_PIXEL_ASPECT_RATIO"] = _videoInput.MediaType_MF_MT_PIXEL_ASPECT_RATIO_get
    if _newclass:
        MF_MT_PIXEL_ASPECT_RATIO = _swig_property(_videoInput.MediaType_MF_MT_PIXEL_ASPECT_RATIO_get, _videoInput.MediaType_MF_MT_PIXEL_ASPECT_RATIO_set)
    __swig_setmethods__["MF_MT_ALL_SAMPLES_INDEPENDENT"] = _videoInput.MediaType_MF_MT_ALL_SAMPLES_INDEPENDENT_set
    __swig_getmethods__["MF_MT_ALL_SAMPLES_INDEPENDENT"] = _videoInput.MediaType_MF_MT_ALL_SAMPLES_INDEPENDENT_get
    if _newclass:
        MF_MT_ALL_SAMPLES_INDEPENDENT = _swig_property(_videoInput.MediaType_MF_MT_ALL_SAMPLES_INDEPENDENT_get, _videoInput.MediaType_MF_MT_ALL_SAMPLES_INDEPENDENT_set)
    __swig_setmethods__["MF_MT_SAMPLE_SIZE"] = _videoInput.MediaType_MF_MT_SAMPLE_SIZE_set
    __swig_getmethods__["MF_MT_SAMPLE_SIZE"] = _videoInput.MediaType_MF_MT_SAMPLE_SIZE_get
    if _newclass:
        MF_MT_SAMPLE_SIZE = _swig_property(_videoInput.MediaType_MF_MT_SAMPLE_SIZE_get, _videoInput.MediaType_MF_MT_SAMPLE_SIZE_set)
    __swig_setmethods__["MF_MT_VIDEO_PRIMARIES"] = _videoInput.MediaType_MF_MT_VIDEO_PRIMARIES_set
    __swig_getmethods__["MF_MT_VIDEO_PRIMARIES"] = _videoInput.MediaType_MF_MT_VIDEO_PRIMARIES_get
    if _newclass:
        MF_MT_VIDEO_PRIMARIES = _swig_property(_videoInput.MediaType_MF_MT_VIDEO_PRIMARIES_get, _videoInput.MediaType_MF_MT_VIDEO_PRIMARIES_set)
    __swig_setmethods__["MF_MT_INTERLACE_MODE"] = _videoInput.MediaType_MF_MT_INTERLACE_MODE_set
    __swig_getmethods__["MF_MT_INTERLACE_MODE"] = _videoInput.MediaType_MF_MT_INTERLACE_MODE_get
    if _newclass:
        MF_MT_INTERLACE_MODE = _swig_property(_videoInput.MediaType_MF_MT_INTERLACE_MODE_get, _videoInput.MediaType_MF_MT_INTERLACE_MODE_set)
    __swig_setmethods__["MF_MT_MAJOR_TYPE"] = _videoInput.MediaType_MF_MT_MAJOR_TYPE_set
    __swig_getmethods__["MF_MT_MAJOR_TYPE"] = _videoInput.MediaType_MF_MT_MAJOR_TYPE_get
    if _newclass:
        MF_MT_MAJOR_TYPE = _swig_property(_videoInput.MediaType_MF_MT_MAJOR_TYPE_get, _videoInput.MediaType_MF_MT_MAJOR_TYPE_set)
    __swig_setmethods__["MF_MT_MAJOR_TYPEName"] = _videoInput.MediaType_MF_MT_MAJOR_TYPEName_set
    __swig_getmethods__["MF_MT_MAJOR_TYPEName"] = _videoInput.MediaType_MF_MT_MAJOR_TYPEName_get
    if _newclass:
        MF_MT_MAJOR_TYPEName = _swig_property(_videoInput.MediaType_MF_MT_MAJOR_TYPEName_get, _videoInput.MediaType_MF_MT_MAJOR_TYPEName_set)
    __swig_setmethods__["MF_MT_SUBTYPE"] = _videoInput.MediaType_MF_MT_SUBTYPE_set
    __swig_getmethods__["MF_MT_SUBTYPE"] = _videoInput.MediaType_MF_MT_SUBTYPE_get
    if _newclass:
        MF_MT_SUBTYPE = _swig_property(_videoInput.MediaType_MF_MT_SUBTYPE_get, _videoInput.MediaType_MF_MT_SUBTYPE_set)
    __swig_setmethods__["MF_MT_SUBTYPEName"] = _videoInput.MediaType_MF_MT_SUBTYPEName_set
    __swig_getmethods__["MF_MT_SUBTYPEName"] = _videoInput.MediaType_MF_MT_SUBTYPEName_get
    if _newclass:
        MF_MT_SUBTYPEName = _swig_property(_videoInput.MediaType_MF_MT_SUBTYPEName_get, _videoInput.MediaType_MF_MT_SUBTYPEName_set)

    def __init__(self):
        this = _videoInput.new_MediaType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_MediaType
    __del__ = lambda self: None
MediaType_swigregister = _videoInput.MediaType_swigregister
MediaType_swigregister(MediaType)

class Stream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["listMediaType"] = _videoInput.Stream_listMediaType_set
    __swig_getmethods__["listMediaType"] = _videoInput.Stream_listMediaType_get
    if _newclass:
        listMediaType = _swig_property(_videoInput.Stream_listMediaType_get, _videoInput.Stream_listMediaType_set)

    def __init__(self):
        this = _videoInput.new_Stream()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_Stream
    __del__ = lambda self: None
Stream_swigregister = _videoInput.Stream_swigregister
Stream_swigregister(Stream)

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    __swig_setmethods__["friendlyName"] = _videoInput.Device_friendlyName_set
    __swig_getmethods__["friendlyName"] = _videoInput.Device_friendlyName_get
    if _newclass:
        friendlyName = _swig_property(_videoInput.Device_friendlyName_get, _videoInput.Device_friendlyName_set)
    __swig_setmethods__["symbolicName"] = _videoInput.Device_symbolicName_set
    __swig_getmethods__["symbolicName"] = _videoInput.Device_symbolicName_get
    if _newclass:
        symbolicName = _swig_property(_videoInput.Device_symbolicName_get, _videoInput.Device_symbolicName_set)
    __swig_setmethods__["listStream"] = _videoInput.Device_listStream_set
    __swig_getmethods__["listStream"] = _videoInput.Device_listStream_get
    if _newclass:
        listStream = _swig_property(_videoInput.Device_listStream_get, _videoInput.Device_listStream_set)

    def __init__(self):
        this = _videoInput.new_Device()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_Device
    __del__ = lambda self: None
Device_swigregister = _videoInput.Device_swigregister
Device_swigregister(Device)

class Parametr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parametr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parametr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CurrentValue"] = _videoInput.Parametr_CurrentValue_set
    __swig_getmethods__["CurrentValue"] = _videoInput.Parametr_CurrentValue_get
    if _newclass:
        CurrentValue = _swig_property(_videoInput.Parametr_CurrentValue_get, _videoInput.Parametr_CurrentValue_set)
    __swig_setmethods__["Min"] = _videoInput.Parametr_Min_set
    __swig_getmethods__["Min"] = _videoInput.Parametr_Min_get
    if _newclass:
        Min = _swig_property(_videoInput.Parametr_Min_get, _videoInput.Parametr_Min_set)
    __swig_setmethods__["Max"] = _videoInput.Parametr_Max_set
    __swig_getmethods__["Max"] = _videoInput.Parametr_Max_get
    if _newclass:
        Max = _swig_property(_videoInput.Parametr_Max_get, _videoInput.Parametr_Max_set)
    __swig_setmethods__["Step"] = _videoInput.Parametr_Step_set
    __swig_getmethods__["Step"] = _videoInput.Parametr_Step_get
    if _newclass:
        Step = _swig_property(_videoInput.Parametr_Step_get, _videoInput.Parametr_Step_set)
    __swig_setmethods__["Default"] = _videoInput.Parametr_Default_set
    __swig_getmethods__["Default"] = _videoInput.Parametr_Default_get
    if _newclass:
        Default = _swig_property(_videoInput.Parametr_Default_get, _videoInput.Parametr_Default_set)
    __swig_setmethods__["Flag"] = _videoInput.Parametr_Flag_set
    __swig_getmethods__["Flag"] = _videoInput.Parametr_Flag_get
    if _newclass:
        Flag = _swig_property(_videoInput.Parametr_Flag_get, _videoInput.Parametr_Flag_set)

    def __init__(self):
        this = _videoInput.new_Parametr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_Parametr
    __del__ = lambda self: None
Parametr_swigregister = _videoInput.Parametr_swigregister
Parametr_swigregister(Parametr)

class CamParametrs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamParametrs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamParametrs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Brightness"] = _videoInput.CamParametrs_Brightness_set
    __swig_getmethods__["Brightness"] = _videoInput.CamParametrs_Brightness_get
    if _newclass:
        Brightness = _swig_property(_videoInput.CamParametrs_Brightness_get, _videoInput.CamParametrs_Brightness_set)
    __swig_setmethods__["Contrast"] = _videoInput.CamParametrs_Contrast_set
    __swig_getmethods__["Contrast"] = _videoInput.CamParametrs_Contrast_get
    if _newclass:
        Contrast = _swig_property(_videoInput.CamParametrs_Contrast_get, _videoInput.CamParametrs_Contrast_set)
    __swig_setmethods__["Hue"] = _videoInput.CamParametrs_Hue_set
    __swig_getmethods__["Hue"] = _videoInput.CamParametrs_Hue_get
    if _newclass:
        Hue = _swig_property(_videoInput.CamParametrs_Hue_get, _videoInput.CamParametrs_Hue_set)
    __swig_setmethods__["Saturation"] = _videoInput.CamParametrs_Saturation_set
    __swig_getmethods__["Saturation"] = _videoInput.CamParametrs_Saturation_get
    if _newclass:
        Saturation = _swig_property(_videoInput.CamParametrs_Saturation_get, _videoInput.CamParametrs_Saturation_set)
    __swig_setmethods__["Sharpness"] = _videoInput.CamParametrs_Sharpness_set
    __swig_getmethods__["Sharpness"] = _videoInput.CamParametrs_Sharpness_get
    if _newclass:
        Sharpness = _swig_property(_videoInput.CamParametrs_Sharpness_get, _videoInput.CamParametrs_Sharpness_set)
    __swig_setmethods__["Gamma"] = _videoInput.CamParametrs_Gamma_set
    __swig_getmethods__["Gamma"] = _videoInput.CamParametrs_Gamma_get
    if _newclass:
        Gamma = _swig_property(_videoInput.CamParametrs_Gamma_get, _videoInput.CamParametrs_Gamma_set)
    __swig_setmethods__["ColorEnable"] = _videoInput.CamParametrs_ColorEnable_set
    __swig_getmethods__["ColorEnable"] = _videoInput.CamParametrs_ColorEnable_get
    if _newclass:
        ColorEnable = _swig_property(_videoInput.CamParametrs_ColorEnable_get, _videoInput.CamParametrs_ColorEnable_set)
    __swig_setmethods__["WhiteBalance"] = _videoInput.CamParametrs_WhiteBalance_set
    __swig_getmethods__["WhiteBalance"] = _videoInput.CamParametrs_WhiteBalance_get
    if _newclass:
        WhiteBalance = _swig_property(_videoInput.CamParametrs_WhiteBalance_get, _videoInput.CamParametrs_WhiteBalance_set)
    __swig_setmethods__["BacklightCompensation"] = _videoInput.CamParametrs_BacklightCompensation_set
    __swig_getmethods__["BacklightCompensation"] = _videoInput.CamParametrs_BacklightCompensation_get
    if _newclass:
        BacklightCompensation = _swig_property(_videoInput.CamParametrs_BacklightCompensation_get, _videoInput.CamParametrs_BacklightCompensation_set)
    __swig_setmethods__["Gain"] = _videoInput.CamParametrs_Gain_set
    __swig_getmethods__["Gain"] = _videoInput.CamParametrs_Gain_get
    if _newclass:
        Gain = _swig_property(_videoInput.CamParametrs_Gain_get, _videoInput.CamParametrs_Gain_set)
    __swig_setmethods__["Pan"] = _videoInput.CamParametrs_Pan_set
    __swig_getmethods__["Pan"] = _videoInput.CamParametrs_Pan_get
    if _newclass:
        Pan = _swig_property(_videoInput.CamParametrs_Pan_get, _videoInput.CamParametrs_Pan_set)
    __swig_setmethods__["Tilt"] = _videoInput.CamParametrs_Tilt_set
    __swig_getmethods__["Tilt"] = _videoInput.CamParametrs_Tilt_get
    if _newclass:
        Tilt = _swig_property(_videoInput.CamParametrs_Tilt_get, _videoInput.CamParametrs_Tilt_set)
    __swig_setmethods__["Roll"] = _videoInput.CamParametrs_Roll_set
    __swig_getmethods__["Roll"] = _videoInput.CamParametrs_Roll_get
    if _newclass:
        Roll = _swig_property(_videoInput.CamParametrs_Roll_get, _videoInput.CamParametrs_Roll_set)
    __swig_setmethods__["Zoom"] = _videoInput.CamParametrs_Zoom_set
    __swig_getmethods__["Zoom"] = _videoInput.CamParametrs_Zoom_get
    if _newclass:
        Zoom = _swig_property(_videoInput.CamParametrs_Zoom_get, _videoInput.CamParametrs_Zoom_set)
    __swig_setmethods__["Exposure"] = _videoInput.CamParametrs_Exposure_set
    __swig_getmethods__["Exposure"] = _videoInput.CamParametrs_Exposure_get
    if _newclass:
        Exposure = _swig_property(_videoInput.CamParametrs_Exposure_get, _videoInput.CamParametrs_Exposure_set)
    __swig_setmethods__["Iris"] = _videoInput.CamParametrs_Iris_set
    __swig_getmethods__["Iris"] = _videoInput.CamParametrs_Iris_get
    if _newclass:
        Iris = _swig_property(_videoInput.CamParametrs_Iris_get, _videoInput.CamParametrs_Iris_set)
    __swig_setmethods__["Focus"] = _videoInput.CamParametrs_Focus_set
    __swig_getmethods__["Focus"] = _videoInput.CamParametrs_Focus_get
    if _newclass:
        Focus = _swig_property(_videoInput.CamParametrs_Focus_get, _videoInput.CamParametrs_Focus_set)

    def __init__(self):
        this = _videoInput.new_CamParametrs()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_CamParametrs
    __del__ = lambda self: None
CamParametrs_swigregister = _videoInput.CamParametrs_swigregister
CamParametrs_swigregister(CamParametrs)

class CaptureVideoFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureVideoFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureVideoFormat, name)
    __repr__ = _swig_repr
    RGB24 = _videoInput.CaptureVideoFormat_RGB24
    RGB32 = _videoInput.CaptureVideoFormat_RGB32
    AYUV = _videoInput.CaptureVideoFormat_AYUV

    def __init__(self):
        this = _videoInput.new_CaptureVideoFormat()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_CaptureVideoFormat
    __del__ = lambda self: None
CaptureVideoFormat_swigregister = _videoInput.CaptureVideoFormat_swigregister
CaptureVideoFormat_swigregister(CaptureVideoFormat)

class StopCallbackEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopCallbackEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StopCallbackEvent, name)
    __repr__ = _swig_repr
    STOP = _videoInput.StopCallbackEvent_STOP
    CAPTUREDEVICEREMOVED = _videoInput.StopCallbackEvent_CAPTUREDEVICEREMOVED

    def __init__(self):
        this = _videoInput.new_StopCallbackEvent()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_StopCallbackEvent
    __del__ = lambda self: None
StopCallbackEvent_swigregister = _videoInput.StopCallbackEvent_swigregister
StopCallbackEvent_swigregister(StopCallbackEvent)

class IStopCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStopCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStopCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Invoke(self, callbackEvent):
        return _videoInput.IStopCallback_Invoke(self, callbackEvent)
    __swig_destroy__ = _videoInput.delete_IStopCallback
    __del__ = lambda self: None
IStopCallback_swigregister = _videoInput.IStopCallback_swigregister
IStopCallback_swigregister(IStopCallback)

class ReadMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadMode, name)
    __repr__ = _swig_repr
    ASYNC = _videoInput.ReadMode_ASYNC
    SYNC = _videoInput.ReadMode_SYNC

    def __init__(self):
        this = _videoInput.new_ReadMode()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_ReadMode
    __del__ = lambda self: None
ReadMode_swigregister = _videoInput.ReadMode_swigregister
ReadMode_swigregister(ReadMode)

class DeviceSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbolicLink"] = _videoInput.DeviceSettings_symbolicLink_set
    __swig_getmethods__["symbolicLink"] = _videoInput.DeviceSettings_symbolicLink_get
    if _newclass:
        symbolicLink = _swig_property(_videoInput.DeviceSettings_symbolicLink_get, _videoInput.DeviceSettings_symbolicLink_set)
    __swig_setmethods__["indexStream"] = _videoInput.DeviceSettings_indexStream_set
    __swig_getmethods__["indexStream"] = _videoInput.DeviceSettings_indexStream_get
    if _newclass:
        indexStream = _swig_property(_videoInput.DeviceSettings_indexStream_get, _videoInput.DeviceSettings_indexStream_set)
    __swig_setmethods__["indexMediaType"] = _videoInput.DeviceSettings_indexMediaType_set
    __swig_getmethods__["indexMediaType"] = _videoInput.DeviceSettings_indexMediaType_get
    if _newclass:
        indexMediaType = _swig_property(_videoInput.DeviceSettings_indexMediaType_get, _videoInput.DeviceSettings_indexMediaType_set)

    def __init__(self):
        this = _videoInput.new_DeviceSettings()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_DeviceSettings
    __del__ = lambda self: None
DeviceSettings_swigregister = _videoInput.DeviceSettings_swigregister
DeviceSettings_swigregister(DeviceSettings)

class CaptureSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CaptureSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CaptureSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["videoFormat"] = _videoInput.CaptureSettings_videoFormat_set
    __swig_getmethods__["videoFormat"] = _videoInput.CaptureSettings_videoFormat_get
    if _newclass:
        videoFormat = _swig_property(_videoInput.CaptureSettings_videoFormat_get, _videoInput.CaptureSettings_videoFormat_set)
    __swig_setmethods__["pIStopCallback"] = _videoInput.CaptureSettings_pIStopCallback_set
    __swig_getmethods__["pIStopCallback"] = _videoInput.CaptureSettings_pIStopCallback_get
    if _newclass:
        pIStopCallback = _swig_property(_videoInput.CaptureSettings_pIStopCallback_get, _videoInput.CaptureSettings_pIStopCallback_set)
    __swig_setmethods__["readMode"] = _videoInput.CaptureSettings_readMode_set
    __swig_getmethods__["readMode"] = _videoInput.CaptureSettings_readMode_get
    if _newclass:
        readMode = _swig_property(_videoInput.CaptureSettings_readMode_get, _videoInput.CaptureSettings_readMode_set)

    def __init__(self):
        this = _videoInput.new_CaptureSettings()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_CaptureSettings
    __del__ = lambda self: None
CaptureSettings_swigregister = _videoInput.CaptureSettings_swigregister
CaptureSettings_swigregister(CaptureSettings)

class ReadSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadSetting, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbolicLink"] = _videoInput.ReadSetting_symbolicLink_set
    __swig_getmethods__["symbolicLink"] = _videoInput.ReadSetting_symbolicLink_get
    if _newclass:
        symbolicLink = _swig_property(_videoInput.ReadSetting_symbolicLink_get, _videoInput.ReadSetting_symbolicLink_set)
    __swig_setmethods__["pPixels"] = _videoInput.ReadSetting_pPixels_set
    __swig_getmethods__["pPixels"] = _videoInput.ReadSetting_pPixels_get
    if _newclass:
        pPixels = _swig_property(_videoInput.ReadSetting_pPixels_get, _videoInput.ReadSetting_pPixels_set)

    def __init__(self):
        this = _videoInput.new_ReadSetting()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_ReadSetting
    __del__ = lambda self: None
ReadSetting_swigregister = _videoInput.ReadSetting_swigregister
ReadSetting_swigregister(ReadSetting)

class CamParametrsSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CamParametrsSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CamParametrsSetting, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbolicLink"] = _videoInput.CamParametrsSetting_symbolicLink_set
    __swig_getmethods__["symbolicLink"] = _videoInput.CamParametrsSetting_symbolicLink_get
    if _newclass:
        symbolicLink = _swig_property(_videoInput.CamParametrsSetting_symbolicLink_get, _videoInput.CamParametrsSetting_symbolicLink_set)
    __swig_setmethods__["settings"] = _videoInput.CamParametrsSetting_settings_set
    __swig_getmethods__["settings"] = _videoInput.CamParametrsSetting_settings_get
    if _newclass:
        settings = _swig_property(_videoInput.CamParametrsSetting_settings_get, _videoInput.CamParametrsSetting_settings_set)

    def __init__(self):
        this = _videoInput.new_CamParametrsSetting()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_CamParametrsSetting
    __del__ = lambda self: None
CamParametrsSetting_swigregister = _videoInput.CamParametrsSetting_swigregister
CamParametrsSetting_swigregister(CamParametrsSetting)

class ResultCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultCode, name)
    __repr__ = _swig_repr
    OK = _videoInput.ResultCode_OK
    UNKNOWN_ERROR = _videoInput.ResultCode_UNKNOWN_ERROR
    MEDIA_FOUNDATION_INITIALIZECOM_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_INITIALIZECOM_ERROR
    MEDIA_FOUNDATION_INITIALIZEMF_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_INITIALIZEMF_ERROR
    MEDIA_FOUNDATION_SHUTDOWN_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SHUTDOWN_ERROR
    MEDIA_FOUNDATION_ENUMDEVICES_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_ENUMDEVICES_ERROR
    MEDIA_FOUNDATION_CREATEATTRIBUTE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATEATTRIBUTE_ERROR
    MEDIA_FOUNDATION_READFRIENDLYNAME_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_READFRIENDLYNAME_ERROR
    MEDIA_FOUNDATION_READSYMBOLICLINK_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_READSYMBOLICLINK_ERROR
    MEDIA_FOUNDATION_GETDEVICE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_GETDEVICE_ERROR
    MEDIA_FOUNDATION_createPresentationDescriptor_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_createPresentationDescriptor_ERROR
    MEDIA_FOUNDATION_GETTHEAMOUNTOFSTREAMS_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_GETTHEAMOUNTOFSTREAMS_ERROR
    MEDIA_FOUNDATION_GETSTREAMDESCRIPTORBYINDEX_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_GETSTREAMDESCRIPTORBYINDEX_ERROR
    MEDIA_FOUNDATION_ENUMMEDIATYPE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_ENUMMEDIATYPE_ERROR
    VIDEOCAPTUREDEVICEMANAGER_GETLISTOFDEVICES_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICEMANAGER_GETLISTOFDEVICES_ERROR
    MEDIA_FOUNDATION_SETSYMBOLICLINK_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETSYMBOLICLINK_ERROR
    MEDIA_FOUNDATION_SETCURRENTMEDIATYPE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETCURRENTMEDIATYPE_ERROR
    MEDIA_FOUNDATION_GETCURRENTMEDIATYPE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_GETCURRENTMEDIATYPE_ERROR
    MEDIA_FOUNDATION_SELECTSTREAM_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SELECTSTREAM_ERROR
    MEDIA_FOUNDATION_CREATESESSION_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATESESSION_ERROR
    MEDIA_FOUNDATION_CREATEMEDIATYPE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATEMEDIATYPE_ERROR
    MEDIA_FOUNDATION_SETGUID_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETGUID_ERROR
    MEDIA_FOUNDATION_SETUINT32_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETUINT32_ERROR
    MEDIA_FOUNDATION_CREATESAMPLERGRABBERSINKACTIVE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATESAMPLERGRABBERSINKACTIVE_ERROR
    MEDIA_FOUNDATION_CREATETOPOLOGY_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATETOPOLOGY_ERROR
    MEDIA_FOUNDATION_CREATETOPOLOGYNODE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CREATETOPOLOGYNODE_ERROR
    MEDIA_FOUNDATION_SETUNKNOWN_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETUNKNOWN_ERROR
    MEDIA_FOUNDATION_SETOBJECT_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETOBJECT_ERROR
    MEDIA_FOUNDATION_ADDNODE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_ADDNODE_ERROR
    MEDIA_FOUNDATION_CONNECTOUTPUTNODE_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_CONNECTOUTPUTNODE_ERROR
    MEDIA_FOUNDATION_SETTOPOLOGY_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_SETTOPOLOGY_ERROR
    MEDIA_FOUNDATION_BEGINGETEVENT_ERROR = _videoInput.ResultCode_MEDIA_FOUNDATION_BEGINGETEVENT_ERROR
    VIDEOCAPTUREDEVICEMANAGER_DEVICEISSETUPED = _videoInput.ResultCode_VIDEOCAPTUREDEVICEMANAGER_DEVICEISSETUPED
    VIDEOCAPTUREDEVICEMANAGER_DEVICEISNOTSETUPED = _videoInput.ResultCode_VIDEOCAPTUREDEVICEMANAGER_DEVICEISNOTSETUPED
    VIDEOCAPTUREDEVICEMANAGER_DEVICESTART_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICEMANAGER_DEVICESTART_ERROR
    VIDEOCAPTUREDEVICE_DEVICESTART_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_DEVICESTART_ERROR
    VIDEOCAPTUREDEVICEMANAGER_DEVICEISNOTSTARTED = _videoInput.ResultCode_VIDEOCAPTUREDEVICEMANAGER_DEVICEISNOTSTARTED
    VIDEOCAPTUREDEVICE_DEVICESTOP_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_DEVICESTOP_ERROR
    VIDEOCAPTURESESSION_INIT_ERROR = _videoInput.ResultCode_VIDEOCAPTURESESSION_INIT_ERROR
    VIDEOCAPTUREDEVICE_DEVICESTOP_WAIT_TIMEOUT = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_DEVICESTOP_WAIT_TIMEOUT
    VIDEOCAPTUREDEVICE_DEVICESTART_WAIT_TIMEOUT = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_DEVICESTART_WAIT_TIMEOUT
    READINGPIXELS_DONE = _videoInput.ResultCode_READINGPIXELS_DONE
    READINGPIXELS_REJECTED = _videoInput.ResultCode_READINGPIXELS_REJECTED
    READINGPIXELS_MEMORY_ISNOT_ALLOCATED = _videoInput.ResultCode_READINGPIXELS_MEMORY_ISNOT_ALLOCATED
    READINGPIXELS_REJECTED_TIMEOUT = _videoInput.ResultCode_READINGPIXELS_REJECTED_TIMEOUT
    VIDEOCAPTUREDEVICE_GETPARAMETRS_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_GETPARAMETRS_ERROR
    VIDEOCAPTUREDEVICE_SETPARAMETRS_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_SETPARAMETRS_ERROR
    VIDEOCAPTUREDEVICE_GETPARAMETRS_GETVIDEOPROCESSOR_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_GETPARAMETRS_GETVIDEOPROCESSOR_ERROR
    VIDEOCAPTUREDEVICE_GETPARAMETRS_GETVIDEOCONTROL_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_GETPARAMETRS_GETVIDEOCONTROL_ERROR
    VIDEOCAPTUREDEVICE_SETPARAMETRS_SETVIDEOCONTROL_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_SETPARAMETRS_SETVIDEOCONTROL_ERROR
    VIDEOCAPTUREDEVICE_SETPARAMETRS_SETVIDEOPROCESSOR_ERROR = _videoInput.ResultCode_VIDEOCAPTUREDEVICE_SETPARAMETRS_SETVIDEOPROCESSOR_ERROR

    def __init__(self):
        this = _videoInput.new_ResultCode()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _videoInput.delete_ResultCode
    __del__ = lambda self: None
ResultCode_swigregister = _videoInput.ResultCode_swigregister
ResultCode_swigregister(ResultCode)

class videoInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, videoInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, videoInput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _videoInput.videoInput_getInstance
    if _newclass:
        getInstance = staticmethod(_videoInput.videoInput_getInstance)

    def getListOfDevices(self, listOfDevices):
        return _videoInput.videoInput_getListOfDevices(self, listOfDevices)

    def setupDevice(self, deviceSettings, captureSettings):
        return _videoInput.videoInput_setupDevice(self, deviceSettings, captureSettings)

    def closeDevice(self, deviceSettings):
        return _videoInput.videoInput_closeDevice(self, deviceSettings)

    def closeAllDevices(self):
        return _videoInput.videoInput_closeAllDevices(self)

    def readPixels(self, readSetting):
        return _videoInput.videoInput_readPixels(self, readSetting)

    def getParametrs(self, parametrs):
        return _videoInput.videoInput_getParametrs(self, parametrs)

    def setParametrs(self, parametrs):
        return _videoInput.videoInput_setParametrs(self, parametrs)

    def setVerbose(self, state):
        return _videoInput.videoInput_setVerbose(self, state)
videoInput_swigregister = _videoInput.videoInput_swigregister
videoInput_swigregister(videoInput)

def videoInput_getInstance():
    return _videoInput.videoInput_getInstance()
videoInput_getInstance = _videoInput.videoInput_getInstance

# This file is compatible with both classic and new-style classes.


